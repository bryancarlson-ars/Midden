@using Caf.Midden.Core.Models.v0_2
@using Microsoft.AspNetCore.Components
@using AntDesign
@inherits FeedbackComponent<Caf.Midden.Wasm.Shared.ViewModels.VariableModalViewModel>
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Caf.Midden.Wasm.Shared.ViewModels

<Form Model="@_model"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Layout="@FormLayout.Vertical">

    <EditorFormItemWithHelpPopup Label="Name" Id="variable-name" Tooltip="@VariableNameTooltip">
        <Input Id="variable-name" @bind-Value="@context.Variable.Name"
               Placeholder="Variable Name" />
     </EditorFormItemWithHelpPopup>

    <EditorFormItemWithHelpPopup Label="Description" Id="variable-description" Tooltip="@VariableDescriptionTooltip">
        <TextArea Id="variable-description" @bind-Value="@context.Variable.Description"
                  Placeholder="Variable description" />
    </EditorFormItemWithHelpPopup>


    <EditorFormItemWithHelpPopup Label="Units" Id="variable-units" Tooltip="@VariableUnitsTooltip">
        <Input Id="variable-units" @bind-Value="@context.Variable.Units"
               Placeholder="Variable units" />
    </EditorFormItemWithHelpPopup>

    <EditorFormItemWithHelpPopup Label="Methods" Id="variable-methods" Tooltip="@VariableMethodsTooltip" IsRequired=false>
        <InputGroup>
            <Row Justify="space-between">
                <AntDesign.Col Span="20">
                    <Input Id="variable-methods" @bind-Value="NewVariableMethod" />
                </AntDesign.Col>
                <AntDesign.Col Span="4">
                    <Button OnClick="AddVariableMethodHandler">Add</Button>
                </AntDesign.Col>
            </Row>
        </InputGroup>
        <br />
        @if (context.Variable.Methods.Count > 0)
        {
            <AntList DataSource="@context.Variable.Methods"
                     Size="small">
                <ChildContent Context="method">
                    <ListItem>
                        <span><Text>@method</Text></span>
                        <Button Danger OnClick="() => DeleteVariableMethodHandler(method)">
                            <Icon Type="delete" />
                        </Button>
                    </ListItem>
                </ChildContent>
            </AntList>
        }
    </EditorFormItemWithHelpPopup>

    <EditorFormItemWithHelpPopup Label="Quality Control" Id="variable-quality-control" Tooltip="@VariableQualityControlsTooltip" IsRequired=false>
        <Select Mode="multiple"
                    Placeholder="Select Quality Control"
                    @bind-Values="@context.SelectedQCApplied"
                    TItemValue="string"
                    TItem="string">
                <SelectOptions>
                    @foreach (var item in context.QCFlags)
                    {
                        <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
                    }
                </SelectOptions>
            </Select>
    </EditorFormItemWithHelpPopup>

    <!-- Not using "FormItem" tag here because it throws an error; something about using a bind-Value with string -->
    @*<Row Gutter="2">
        <AntDesign.Col Span="8"><div style="text-align: right;">Quality Control: </div></AntDesign.Col>
        <AntDesign.Col Span="16">
            <Select Mode="multiple"
                    Placeholder="Select Quality Control"
                    @bind-Values="@context.SelectedQCApplied"
                    TItemValue="string"
                    TItem="string">
                <SelectOptions>
                    @foreach (var item in context.QCFlags)
                    {
                        <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
                    }
                </SelectOptions>
            </Select>
        </AntDesign.Col>
    </Row>*@

    <EditorFormItemWithHelpPopup Label="Processing" Id="variable-processing" Tooltip="@VariableProcessingTooltip" IsRequired=false>
        <SimpleSelect Id="variable-processing" @bind-Value="@context.Variable.ProcessingLevel"
                      Placeholder="Processing Level">
            <SelectOptions>
                @foreach (var item in context.ProcessingLevels)
                {
                    <SimpleSelectOption Value=@item Label=@item />
                }
            </SelectOptions>
        </SimpleSelect>
    </EditorFormItemWithHelpPopup>
    <EditorFormItemWithHelpPopup Label="Type" Id="variable-type" Tooltip="@VariableTypeTooltip" IsRequired=false>
        <SimpleSelect Id="variable-type" @bind-Value="@context.Variable.VariableType"
                      Placeholder="Variable Type">
            <SelectOptions>
                @foreach (var item in context.VariableTypes)
                {
                    <SimpleSelectOption Value=@item Label=@item />
                }
            </SelectOptions>
        </SimpleSelect>
    </EditorFormItemWithHelpPopup>

    <EditorFormItemWithHelpPopup Label="Tags" Id="variable-tags" Tooltip="@VariableTagsTooltip" IsRequired=false>
        <Space Style="width:100%;">
            <SpaceItem>
                <Input Id="variable-tags" @bind-Value="NewVariableTag" />
            </SpaceItem>
            <SpaceItem>
                <Button OnClick="AddVariableTagHandler">Add</Button>
            </SpaceItem>
            <SpaceItem><Divider Type="DirectionVHType.Vertical" /></SpaceItem>
            <div style="width:100%;">
                <SpaceItem>
                    <SimpleSelect Placeholder="Add saved tag"
                                  OnSelectedItemChanged="VariableTagSelectedItemChangedHandler"
                                  EnableSearch
                                  @bind-Value="SavedVariableTag"
                                  AutoClearSearchValue>
                        <SelectOptions>
                            @foreach (var tag in _model.Tags)
                            {
                                <SimpleSelectOption Value=@tag Label=@tag />
                            }
                        </SelectOptions>
                    </SimpleSelect>
                </SpaceItem>
            </div>
        </Space>
        <br />
        @if (_model.Variable.Tags.Count > 0)
        {
            <AntList DataSource="@_model.Variable.Tags">
                <ChildContent Context="tag">
                    <ListItem>
                        <span><Tag>@tag</Tag></span>
                        <Button Danger OnClick="() => DeleteVariableTagHandler(tag)">
                            <Icon Type="delete" />
                        </Button>
                    </ListItem>
                </ChildContent>
            </AntList>
        }
    </EditorFormItemWithHelpPopup>
    <!-- Depricated 
    <EditorFormItemWithHelpPopup Label="Height" Id="variable-height" Tooltip="@VariableHeightTooltip" IsRequired=false>
        <Input Id="variable-height" @bind-Value="@context.Variable.Height"
               Placeholder="Variable height" />
    </EditorFormItemWithHelpPopup>
    -->
</Form>

@code {
    private VariableModalViewModel _model;

    private string VariableNameTooltip = @"This is the name of the variable (e.g. a column header in a CSV file or a field name in a shapefile/geojson). ";
    private string VariableDescriptionTooltip = @"This is the description of the variable and should describe any coded values, variable type (numeric, int, VARCHAR, string, etc.), and acceptable values (e.g. 0.0-9999).";
    private string VariableUnitsTooltip = @"This is the units of the variable, if applicable.";
    private string VariableMethodsTooltip = @"These are methods details that are specific to the variable such as sensor information, analytic equipment, etc. The intent for these fields is to provide multiple links (e.g. GitHub repository, protocols.io, standard operating procedures), but this currently also supports free text.";
    private string VariableQualityControlsTooltip = @"This is a list of quality control checks that have been applied to the variable. These are intended to be general categories of checks that can be used to filter variables when searching for certain data quality. Specific details of the quality control checks can be described in the methods field (or in a linked resource). Items in the dropdown menu are populated by information specified in the app configuration.";
    private string VariableProcessingTooltip = @"This provides information on how the data value was created. These are intended to be general categories to be used to filter variables when searching for certain level of processing (e.g. directly measured values vs modeled values). Details of the processing should be defined in the methods field (or in a linked resource). Items in the dropdown menu are populated by information specified in the app configuration.";
    private string VariableTypeTooltip = @"This provides additional filtering ability and further context to the variable. Examples based on statistical fields are 'discrete', 'continuous', 'nominal', etc. Default values 'dimension' and 'metric' are based on dimensional modeling. Items in the dropdown menu are populated by information specified in the app configuration.";
    private string VariableTagsTooltip = @"These tags are specific to the individual variable, as opposed to tags used for the parent dataset, and help with data discoverablity. These tags can also be used to map variable names to controlled vocabularies (e.g. ICASA,  AGROVOC).";
    private string VariableHeightTooltip = @"Uhg, does anyone use this? Height at which the measurement was taken, if applicable. Depricated and likely will be removed.";

    protected override void OnInitialized()
    {
        _model = base.Options ?? new VariableModalViewModel();
        base.OnInitialized();
    }

    private void OnFinish(EditContext editContext)
    {
        _ = base.FeedbackRef.CloseAsync();
    }

    private void OnFinishFailed(EditContext editContext)
    {

    }

    private void OnSelectedItemsChangedHandler(IEnumerable<string> values)
    {
        if (values != null)
            Console.WriteLine($"selected: ${string.Join(",", values)}");
    }

    #region VariableMethods
    private string NewVariableMethod { get; set; }


    private void AddVariableMethod(string method)
    {
        if (!string.IsNullOrWhiteSpace(method) &&
            !IsDuplicateVariableMethod(method))
        {
            _model.Variable.Methods.Add(method);
            NewVariableMethod = "";
        }
    }
    private bool IsDuplicateVariableMethod(string method)
    {
        var dup = _model.Variable.Methods.Find(s => s == method);
        if (string.IsNullOrEmpty(dup))
            return false;
        else { return true; }
    }

    private void AddVariableMethodHandler()
    {
        AddVariableMethod(NewVariableMethod);
    }
    private void DeleteVariableMethodHandler(string method)
    {
        _model.Variable.Methods.Remove(method);
    }
    #endregion

    #region VariableTag
    private string NewVariableTag { get; set; }
    private string SavedVariableTag { get; set; }

    private void AddVariableTag(string tag)
    {
        if (!string.IsNullOrWhiteSpace(tag) &&
            !IsDuplicateVariableTag(tag))
        {
            _model.Variable.Tags.Add(tag);
        }
    }
    private void AddVariableTagHandler()
    {
        AddVariableTag(NewVariableTag);
        NewVariableTag = "";
    }

    private void VariableTagSelectedItemChangedHandler(string value)
    {
        AddVariableTag(value);
        SavedVariableTag = "";
    }

    private void DeleteVariableTagHandler(string tag)
    {
        _model.Variable.Tags.Remove(tag);
    }

    private bool IsDuplicateVariableTag(string tag)
    {
        var dup = _model.Variable.Tags.Find(s => s == tag);
        if (string.IsNullOrEmpty(dup))
            return false;
        else { return true; }
    }
    #endregion
}
