@using Caf.Midden.Core.Models.v0_2
@using Microsoft.AspNetCore.Components
@using AntDesign
@inherits FeedbackComponent<Caf.Midden.Wasm.Shared.ViewModels.PersonModalViewModel>
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Caf.Midden.Wasm.Shared.ViewModels

<Form Model="@_model"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Layout="@FormLayout.Vertical">
    <EditorFormItemWithHelpPopup Label="Name" Id="contact-name" Tooltip="@ContactsNameTooltip">
        <Input Id="contact-name" @bind-Value="@context.Person.Name"
               Placeholder="Name of contact" />
    </EditorFormItemWithHelpPopup>
    
    <EditorFormItemWithHelpPopup Label="Email" Id="contact-email" Tooltip="@ContactsEmailTooltip" IsRequired=false>
        <Input Id="contact-email" @bind-Value="@context.Person.Email"
               Placeholder="Email of contact" />
    </EditorFormItemWithHelpPopup>

    <EditorFormItemWithHelpPopup Label="Role" Id="contact-role" Tooltip="@ContactsRoleTooltip" IsRequired=false>
        <SimpleSelect Id="contact-role" @bind-Value="@context.Person.Role"
                      Placeholder="Role of contact">
            <SelectOptions>
                @foreach (var role in context.Roles)
                {
                    <SimpleSelectOption Value=@role Label=@role />
                }
            </SelectOptions>
        </SimpleSelect>        
    </EditorFormItemWithHelpPopup>
</Form>

@code {
    private PersonModalViewModel _model;

    private string ContactsNameTooltip = @"This is the name of the contact person.";
    private string ContactsEmailTooltip = @"This is the email address of the contact person.";
    private string ContactsRoleTooltip = @"This is the role of the contact person. Items in the dropdown menu are populated by information in the app configuration.";

    protected override void OnInitialized()
    {
        _model = base.Options ?? new PersonModalViewModel();
        base.OnInitialized();
    }

    private void OnFinish(EditContext editContext)
    {
        _ = base.FeedbackRef.CloseAsync();
    }

    private void OnFinishFailed(EditContext editContext)
    {
        
    }
}
